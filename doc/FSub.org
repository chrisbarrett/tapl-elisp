#+TITLE: System F With Subtyping
#+OPTIONS: toc:2
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/styles.css" />

* Introduction

The type system is based on System F-sub[fn:f-sub], an extension to System F
that adds subtyping. The summary below is taken from /An Extension Of System F
With Subtyping/[fn:f-sub-paper].

* Syntax

** Types and Terms

Type-level terms are notated as below:

| NOTATION    | MEANING                 |
|-------------+-------------------------|
| X           | type variables          |
| Top         | supertype of all types  |
| A → B       | function spaces         |
| ∀(x <: A) B | bounded quantifications |

Value-level terms are notated as below:

| NOTATION    | MEANING                 |
|-------------+-------------------------|
| x           | value variables         |
| top         | the canonical Top value |
| λ(x : A) b  | functions               |
| b(a)        | function application    |
| λ(x <: A) b | bounded type functions  |
| b(A)        | type application        |

** Judgements

| NOTATION      | MEANING                             |
|---------------+-------------------------------------|
| ⊢ E           | E is a well-formed environment      |
| E ⊢ A         | A is a type                         |
| E ⊢ A <: B    | A is a subtype of B                 |
| E ⊢ a : A     | a has type A                        |
| E ⊢ a ↔ b : A | a and b are equal members of type A |

* Rules

** Environments

*** Env ∅
An empty environment is well-formed.

#+BEGIN_EXAMPLE
  ———
  ⊢ ∅
#+END_EXAMPLE

*** Env x
A new value of a known type can be added to the environment.

#+BEGIN_EXAMPLE
  E ⊢ A    x ∉ dom(E)
  ———————————————————
      ⊢ E, x : A
#+END_EXAMPLE


*** Env X
A new subtype of an existing type can be added to the environment.

#+BEGIN_EXAMPLE
  E ⊢ A    X ∉ dom(E)
  ———————————————————
      ⊢ E, X <: A
#+END_EXAMPLE

Note that Top is used if no other supertype is appropriate.

Note that this differs from System F, where =X= has a strict type and not a
bound.

** Types

*** Type X
A type may be referenced from the environment.

#+BEGIN_EXAMPLE
  ⊢ E, (X <: A), E'
  —————————————————
  E,(X <: A),E' ⊢ X
#+END_EXAMPLE

Note that =X= is associated with a type bound, unlike vanilla System F.

*** Type Top
The Top type is implicitly available in any typing environment.

#+BEGIN_EXAMPLE
    ⊢ E
  ———————
  E ⊢ Top
#+END_EXAMPLE

This rule is not present in System F.

*** Type →
Function types may be constructed from types in the environment.

#+BEGIN_EXAMPLE
  E ⊢
      A
      B
      —————
      A → B
#+END_EXAMPLE

*** Type ∀
Functions can be constructed with type parameters, which are alway bounded.

#+BEGIN_EXAMPLE
  E,
  X <: A
  ⊢
      B
      ———————————
      ∀(X <: A) B
#+END_EXAMPLE

This differs from System F in that the type parameter =X= has a type bound.

** Subtypes

This entire section is novel to F-Sub.

*** Sub refl
Any type is reflexively a subtype of itself.

#+BEGIN_EXAMPLE
  E ⊢
      A
      ——————
      A <: A
#+END_EXAMPLE

*** Sub trans
Subtyping is a transitive relation.

#+BEGIN_EXAMPLE
  E ⊢
      A <: B
      B <: C
      ——————
      A <: C
#+END_EXAMPLE

*** Sub X
A subtyping relation for some type may be added to the environment.

#+BEGIN_EXAMPLE
     ⊢ E, (X <: A), E'
  ————————————————————————
  E, (X <: A), E' ⊢ X <: A
#+END_EXAMPLE

*** Sub Top
All types are subtypes of Top.

#+BEGIN_EXAMPLE
  E ⊢
      A
      ————————
      A <: Top
#+END_EXAMPLE

*** Sub →
One function is a subtype of another if the domain is widened and the codomain
is narrowed.

#+BEGIN_EXAMPLE
  E ⊢
      A' <: A
      B <: B'
      ————————————————————
      (A → B) <: (A' → B')
#+END_EXAMPLE

*** Sub ∀
A function with a bounded quantifier is a subtype of another if the bound is
higher and the codomain is narrowed.

#+BEGIN_EXAMPLE
  E ⊢ A' <: A     E,(X <: A) ⊢ B <: B'
  ————————————————————————————————————
      E ⊢ ∀(X <: A)B <: ∀(X:A')B'
#+END_EXAMPLE

** Values

*** Subsumption
The type of a value can be subsumed for a supertype.

#+BEGIN_EXAMPLE
  E ⊢
      a : A
      A <: B
      ——————
      a : B
#+END_EXAMPLE

This subsumption rule is novel to F-Sub.

*** Val x
A binding can be extracted from the binding environment with its type.

#+BEGIN_EXAMPLE
    ⊢ E, x:A, E'
  ————————————————
  E, x:A, E' ⊢ x:A
#+END_EXAMPLE

*** Val top
The canonical top value is available in any environment.

#+BEGIN_EXAMPLE
      ⊢ E
  —————————————
  E ⊢ top : Top
#+END_EXAMPLE

This rule is novel to F-Sub.

*** Val fun
A function value with a fixed argument type may be constructed.

#+BEGIN_EXAMPLE
      E, x:A ⊢ b:B
  ———————————————————
  E ⊢ λ(x:A)b : A → B
#+END_EXAMPLE

*** Val fun2
A function with a bounded type parameter may be constructed.

#+BEGIN_EXAMPLE
        E,(X <: A) ⊢ b:B
  ———————————————————————————
  E ⊢ λ(X <: A)b : ∀(X <: A)B
#+END_EXAMPLE

This rule differs from System F, in that type parameters are alway bounded.

*** Val appl
Values may be applied to functions with fixed argument types.

#+BEGIN_EXAMPLE
  E ⊢
      b : A → B
      a:A
      —————————
      b(a) : B
#+END_EXAMPLE

*** Val appl2
Types may be applied to functions with bounded type parameters to fix the
argument types.

#+BEGIN_EXAMPLE
  E ⊢
      b : ∀(X <: A)B
      A' <: A
      —————————————————
      b(A') : B{X ← A'}
#+END_EXAMPLE

This rule differs from System F in that type parameters are always bounded, and
the satisfiability of the bound for a type is encoded in the environment.

** Equivalence

*** Eq symm
Two values of the same type are equivalent at the type level, and may be
substituted for one-another.

#+BEGIN_EXAMPLE
  E ⊢
      a ↔ b : A
      —————————
      b ↔ a : A
#+END_EXAMPLE

*** Eq x
Any value is equivalent to itself.

#+BEGIN_EXAMPLE
  E ⊢
      x : A
      —————————
      x ↔ x : A
#+END_EXAMPLE

*** Eq fun
Monomorphic functions are equivalent if the domain and codomain are the same and
inner term is equivalent.

#+BEGIN_EXAMPLE
       E, x:A ⊢ b ↔ b' : B
  ——————————————————————————————
  E ⊢ λ(x:A)b ↔ λ(x:A)b' : A → B
#+END_EXAMPLE

*** Eq fun2
Functions with bounded type parameters are equivalent when _(Eq fun)_ holds and
bounds are equivalent types.

#+BEGIN_EXAMPLE
          E,(X <: A) ⊢ b ↔ b' : B
  —————————————————————————————————————————
  E ⊢ λ(X <: A)b ↔ λ(X <: A)b' : ∀(X <: A)B
#+END_EXAMPLE

*** Eq eta
Eta reduction eliminates monomorphic function abstraction.

#+BEGIN_EXAMPLE
  E ⊢
      b ↔ b' : A → B
      y ∉ dom(E)
      —————————————————————————
      λ(y:A)(b(y)) ↔ b' : A → B
#+END_EXAMPLE

*** Eq eta2
Eta reduction of a type parameter monomorphises the function.

#+BEGIN_EXAMPLE
  E ⊢
      b ↔ b' : ∀(X <: A)B
      Y ∉ dom(E)
      —————————————————————————————
      (λ(Y<:A)b)(Y) ↔ b' : ∀(X<:A)B
#+END_EXAMPLE

*** Eq beta
Beta reduction at the value level substitutes a lambda argument for its
parameter.

#+BEGIN_EXAMPLE
  E,x:A ⊢ b ↔ b' : B     E ⊢ a ↔ a' : A
  ——————————————————————————————————————
    E ⊢ (λ(x:A)b)(a) ↔ b'{x ← a'} : B
#+END_EXAMPLE

*** Eq beta2
Beta reduction at the type level substitutes a type argument for its parameter.

#+BEGIN_EXAMPLE
     E, X <: A ⊢ b ↔ b' : B      E ⊢ A' <: A
    ——————————————————————————————————————————
    E ⊢ (λ(X<:A)b)(A') ↔ b'{X ← A'}: B{X ← A'}
#+END_EXAMPLE

*** Eq appl
Equivalent functions, applied to equivalent arguments, produce an equivalent
value.

#+BEGIN_EXAMPLE
  E ⊢
      b ↔ b' : A → B
      a ↔ a' : A
      —————————————————
      b(a) ↔ b'(a') : B
#+END_EXAMPLE

*** Eq appl2
Functions with bounded parameters are equivalent if

1. The functions are equivalent,
2. The type arguments have a common supertype, and
3. The codomains under the type arguments share a common supertype

#+BEGIN_EXAMPLE
  E ⊢
      A' <: A
      A" <: A
      B{X ← A'} <: C
      B{X ← A"} <: C
      b' ↔ b" : ∀(X <: A)B
      ———————————————————
      b'(A') ↔ b"(A") : C
#+END_EXAMPLE

* Footnotes                                                        :noexport:

[fn:f-sub] https://en.wikipedia.org/wiki/System_F-sub
[fn:f-sub-paper] [[http://lucacardelli.name/Papers/FSub%20(TACS).pdf]]
